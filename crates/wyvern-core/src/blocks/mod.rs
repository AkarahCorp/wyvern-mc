mod properties;
pub use properties::*;
mod components;
pub use components::*;
mod structure;
pub use structure::*;

use datafix::serialization::{CodecAdapters, CodecOps, DefaultCodec, MapCodecBuilder};

use std::collections::{BTreeMap, HashSet};
use std::sync::LazyLock;

use voxidian_protocol::autogenerated::block_states::{
    BLOCK_STATE_DEFAULTS, BLOCK_STATE_TO_ID, BLOCK_STATES, ID_TO_BLOCK_STATE,
};
use voxidian_protocol::value::{BlockState as ProtocolState, Identifier};

use crate::components::{DataComponentHolder, DataComponentMap};
use wyvern_values::Id;

pub static BLOCK_STATE_KEYS: LazyLock<HashSet<Id>> = LazyLock::new(|| {
    let mut set = HashSet::new();
    for state in BLOCK_STATES.iter().map(|x| x.block_state.id.clone()) {
        set.insert(state.into());
    }
    set
});

pub struct Block {}

#[derive(Debug, Clone)]
pub struct BlockState {
    pub(crate) block: Id,
    pub(crate) components: DataComponentMap,
}

impl<OT: Clone, O: CodecOps<OT>> DefaultCodec<OT, O> for BlockState {
    fn codec() -> impl datafix::serialization::Codec<Self, OT, O> {
        MapCodecBuilder::new()
            .field(Id::codec().field_of("Name", |state: &BlockState| &state.block))
            .field(
                BTreeMap::codec()
                    .xmap(array_to_components, components_to_array)
                    .default_field_of(
                        "Properties",
                        |state: &BlockState| &state.components,
                        DataComponentMap::new,
                    ),
            )
            .build(|block, components| BlockState { block, components })
    }
}

impl DataComponentHolder for BlockState {
    fn component_map(&self) -> &DataComponentMap {
        &self.components
    }

    fn component_map_mut(&mut self) -> &mut DataComponentMap {
        &mut self.components
    }
}

impl BlockState {
    pub fn new(id: Id) -> Self {
        (&ProtocolState::default_for(&id.into()).unwrap_or_else(|| {
            ProtocolState::default_for(&Identifier::new_const("minecraft", "air")).unwrap()
        }))
            .into()
    }

    pub fn name(&self) -> &Id {
        &self.block
    }

    pub fn protocol_id(&self) -> i32 {
        *BLOCK_STATE_TO_ID.get(&self.into()).unwrap_or(&0)
    }

    pub fn from_protocol_id(id: i32) -> Self {
        Self::from(ID_TO_BLOCK_STATE.get(&id).unwrap_or({
            eprintln!("id: {:#?}", id);
            ID_TO_BLOCK_STATE.get(&0).unwrap()
        }))
    }

    pub fn id_is_valid(&self) -> bool {
        BLOCK_STATE_DEFAULTS.contains_key(&self.block.clone().into())
    }
}

impl From<&ProtocolState> for BlockState {
    fn from(value: &ProtocolState) -> Self {
        BlockState {
            block: value.id.clone().into(),
            components: components::array_to_components(&value.properties),
        }
    }
}

impl From<&BlockState> for ProtocolState {
    fn from(value: &BlockState) -> Self {
        ProtocolState {
            id: value.block.clone().into(),
            properties: components::components_to_array(&value.components),
        }
    }
}

pub struct Blocks;
wyvern_macros::generate_blocks_types!();
